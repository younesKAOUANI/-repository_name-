generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String         @id @default(uuid())
  name                    String?
  email                   String?        @unique
  emailVerified           DateTime?
  image                   String?
  role                    Role           @default(STUDENT)
  sex                     Sex?
  phoneNumber             String?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  emailVerificationToken  String?
  password                String?
  pendingEmail            String?
  resetToken              String?
  resetTokenExpiry        DateTime?
  university              String?
  universityId            String?
  year                    Int?
  emailVerificationExpiry DateTime?
  accounts                Account[]
  licenses                License[]
  quizAttempts            QuizAttempt[]
  quizProgresses          QuizProgress[]
  sessions                Session[]
  universityRelation      University? @relation(fields: [universityId], references: [id])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StudyYear {
  id                String             @id @default(cuid())
  name              String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  licenseStudyYears LicenseStudyYear[]
  questionBank      QuestionBank[]
  semesters         Semester[]

  @@index([name])
}

model Semester {
  id               String            @id @default(cuid())
  name             String
  studyYearId      String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  licenseSemesters LicenseSemester[]
  modules          Module[]
  studyYear        StudyYear         @relation(fields: [studyYearId], references: [id], onDelete: Cascade)

  @@index([studyYearId])
  @@index([name])
}

model Module {
  id                String          @id @default(cuid())
  name              String
  semesterId        String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  description       String?
  lessons           Lesson[]
  licenseLinks      LicenseModule[]
  semester          Semester        @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  questionBankItems QuestionBank[]
  quizzes           Quiz[]

  @@index([semesterId])
}

model Lesson {
  id                String              @id @default(cuid())
  title             String
  content           String?
  moduleId          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  description       String?
  order             Int                 @default(0)
  module            Module              @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  pdfs              LessonPDF[]
  videos            LessonVideo[]
  questionBankItems QuestionBank[]
  quizzes           Quiz[]
  sessionLinks      SessionQuizLesson[]

  @@index([moduleId])
  @@index([moduleId, order])
}

model LessonPDF {
  id       String @id @default(cuid())
  url      String
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([lessonId])
}

model LessonVideo {
  id       String @id @default(cuid())
  url      String
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([lessonId])
}

model Quiz {
  id                 String                  @id @default(cuid())
  title              String
  lessonId           String?
  moduleId           String?
  type               QuizType
  order              Int?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  description        String?
  questionCount      Int?
  timeLimit          Int?
  generatedQuestions GeneratedQuizQuestion[]
  questions          Question[]
  lesson             Lesson?                 @relation(fields: [lessonId], references: [id])
  module             Module?                 @relation(fields: [moduleId], references: [id])
  attempts           QuizAttempt[]
  progresses         QuizProgress[]
  sessionLessons     SessionQuizLesson[]

  @@index([lessonId])
  @@index([moduleId])
  @@index([type])
}

model Question {
  id             String              @id @default(cuid())
  text           String
  quizId         String
  questionType   QuestionType
  order          Int?
  explanation    String?             // Text explanation for the correct answer
  explanationImg String?             // Image URL for schema/diagram explanation
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  options        AnswerOption[]
  quiz           Quiz                @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attemptAnswers QuizAttemptAnswer[]

  @@index([quizId])
}

model QuestionBank {
  id            String                  @id @default(cuid())
  text          String
  questionType  QuestionType
  lessonId      String?
  moduleId      String?
  difficulty    String?
  explanation   String?                 // Text explanation for the correct answer
  explanationImg String?                // Image URL for schema/diagram explanation
  isActive      Boolean                 @default(true)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  studyYearId   String?
  usedInQuizzes GeneratedQuizQuestion[]
  lesson        Lesson?                 @relation(fields: [lessonId], references: [id])
  module        Module?                 @relation(fields: [moduleId], references: [id])
  studyYear     StudyYear?              @relation(fields: [studyYearId], references: [id])
  options       QuestionBankOption[]

  @@index([studyYearId])
  @@index([lessonId])
  @@index([moduleId])
  @@index([isActive])
}

model QuestionBankOption {
  id             String       @id @default(cuid())
  text           String
  isCorrect      Boolean
  questionBankId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  questionBank   QuestionBank @relation(fields: [questionBankId], references: [id], onDelete: Cascade)

  @@index([questionBankId])
}

model GeneratedQuizQuestion {
  id             String       @id @default(cuid())
  quizId         String
  questionBankId String
  order          Int?
  questionBank   QuestionBank @relation(fields: [questionBankId], references: [id], onDelete: Cascade)
  quiz           Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([quizId, questionBankId])
  @@index([quizId])
  @@index([questionBankId])
}

model AnswerOption {
  id         String              @id @default(cuid())
  text       String
  isCorrect  Boolean
  questionId String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  question   Question            @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedBy QuizAttemptAnswer[]

  @@index([questionId])
}

model QuizAttempt {
  id         String              @id @default(cuid())
  userId     String
  quizId     String
  startedAt  DateTime
  finishedAt DateTime?
  score      Decimal?            @db.Decimal(5, 2)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  quiz       Quiz                @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers    QuizAttemptAnswer[]

  @@index([userId])
  @@index([quizId])
}

model QuizAttemptAnswer {
  id               String        @id @default(cuid())
  attemptId        String
  questionId       String
  selectedOptionId String?
  isCorrect        Boolean
  attempt          QuizAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   AnswerOption? @relation(fields: [selectedOptionId], references: [id])

  @@index([attemptId])
  @@index([questionId])
  @@index([selectedOptionId])
}

model QuizProgress {
  id        String             @id @default(cuid())
  userId    String
  quizId    String
  status    QuizProgressStatus @default(NOT_STARTED)
  unlocked  Boolean            @default(false)
  updatedAt DateTime           @updatedAt
  quiz      Quiz               @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, quizId])
  @@index([userId])
  @@index([quizId])
}

model SessionQuizLesson {
  id       String @id @default(cuid())
  quizId   String
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz     Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([quizId, lessonId])
  @@index([quizId])
  @@index([lessonId])
}

model University {
  id         String      @id @default(cuid())
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  driveLinks DriveLink[]
  users      User[]

  @@index([name])
}

model DriveLink {
  id           String     @id @default(cuid())
  studyYear    String
  year         String
  link         String
  universityId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  university   University @relation(fields: [universityId], references: [id], onDelete: Cascade)

  @@index([universityId])
  @@index([studyYear])
  @@index([year])
}

model PlanType {
  id       String       @id @default(cuid())
  name     PlanTypeName
  duration Int
  plans    Plan[]
}

model Plan {
  id         String    @id @default(cuid())
  planTypeId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  licenses   License[]
  planType   PlanType  @relation(fields: [planTypeId], references: [id])

  @@index([planTypeId])
}

model License {
  id        String            @id @default(cuid())
  userId    String
  planId    String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  plan      Plan              @relation(fields: [planId], references: [id])
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  modScope  LicenseModule?
  semScope  LicenseSemester?
  yearScope LicenseStudyYear?

  @@index([userId])
  @@index([planId])
}

model LicenseStudyYear {
  id          String    @id @default(cuid())
  licenseId   String    @unique
  studyYearId String
  license     License   @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  studyYear   StudyYear @relation(fields: [studyYearId], references: [id], onDelete: Cascade)

  @@index([studyYearId])
}

model LicenseSemester {
  id         String   @id @default(cuid())
  licenseId  String   @unique
  semesterId String
  license    License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  semester   Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade)

  @@index([semesterId])
}

model LicenseModule {
  id        String  @id @default(cuid())
  licenseId String  @unique
  moduleId  String
  license   License @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  module    Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum QuizType {
  QUIZ
  EXAM
  SESSION
}

enum QuestionType {
  QCMA
  QCMP
  QCS
  QROC
}

enum QuizProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum PlanTypeName {
  ANNUAL
  SEMESTRIAL
  MODULE
}

enum Sex {
  MALE
  FEMALE
}

model Contact {
  id        String      @id @default(uuid())
  firstName String
  lastName  String
  email     String
  subject   String
  message   String      @db.Text
  type      ContactType @default(SUPPORT)
  status    ContactStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  adminNotes String?    @db.Text
  respondedAt DateTime?
  respondedBy String?

  @@map("contacts")
}

enum ContactType {
  SUPPORT
  BILLING
  FEATURE
  PARTNERSHIP
  OTHER
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}
